generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  runs          Run[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Existing Models
model Run {
  id            String    @id @default(uuid())
  pageUrl       String
  targetKeyword String?
  email         String?
  status        RunStatus @default(queued)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  audits        Audit[]
  userId        String?
  user          User?     @relation(fields: [userId], references: [id])
}

model Audit {
  id        String   @id @default(uuid())
  runId     String
  json      Json
  createdAt DateTime @default(now())
  run       Run      @relation(fields: [runId], references: [id])
}

model GscToken {
  id        String   @id @default(uuid())
  state     String   @unique
  tokens    Json
  createdAt DateTime @default(now())
}

model Domain {
  id                String              @id @default(cuid())
  url               String              @unique
  createdAt         DateTime            @default(now())
  rankSnapshots     RankSnapshot[]
  backlinkSnapshots BacklinkSnapshot[]
}

model RankSnapshot {
  id        String   @id @default(cuid())
  domainId  String
  keyword   String
  position  Int
  provider  String   @default("serpapi")
  createdAt DateTime @default(now())
  Domain    Domain   @relation(fields: [domainId], references: [id])
}

model BacklinkSnapshot {
  id               String   @id @default(cuid())
  domainId         String
  totalBacklinks   Int
  referringDomains Int
  provider         String   @default("openlinkprofiler")
  createdAt        DateTime @default(now())
  Domain           Domain   @relation(fields: [domainId], references: [id])
}

enum RunStatus {
  queued
  running
  ready
  failed
}
