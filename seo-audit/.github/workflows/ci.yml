name: CI

on:
  push:
    branches:
      - main
      - 'ai/**'
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Find package.json
        id: find_package
        run: |
          pkg_dir=$(find . -name "package.json" -not -path "*/node_modules/*" | head -n 1 | xargs -r dirname)
          if [ -n "$pkg_dir" ]; then
            echo "package_dir=${pkg_dir}" >> $GITHUB_OUTPUT
            echo "found=true" >> $GITHUB_OUTPUT
            echo "Package found in ${pkg_dir}"
          else
            echo "No package.json found. Skipping CI steps."
            echo "found=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Install dependencies
        if: steps.find_package.outputs.found == 'true'
        working-directory: ${{ steps.find_package.outputs.package_dir }}
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            echo "pnpm-lock.yaml found, using pnpm."
            npm install -g pnpm
            pnpm install --frozen-lockfile
          elif [ -f "yarn.lock" ]; then
            echo "yarn.lock found, using yarn."
            yarn install --frozen-lockfile
          elif [ -f "package-lock.json" ]; then
            echo "package-lock.json found, using npm."
            npm ci
          else
            echo "No lockfile found, using npm install."
            npm install
          fi

      - name: Run lint script
        if: steps.find_package.outputs.found == 'true'
        working-directory: ${{ steps.find_package.outputs.package_dir }}
        run: |
          if grep -q '"lint":' package.json; then
            echo "Running lint script..."
            if [ -f "pnpm-lock.yaml" ]; then
              pnpm run lint
            elif [ -f "yarn.lock" ]; then
              yarn lint
            else
              npm run lint
            fi
          else
            echo "No lint script found."
          fi

      - name: Run build script
        if: steps.find_package.outputs.found == 'true'
        working-directory: ${{ steps.find_package.outputs.package_dir }}
        run: |
          if grep -q '"build":' package.json; then
            echo "Running build script..."
            if [ -f "pnpm-lock.yaml" ]; then
              pnpm run build
            elif [ -f "yarn.lock" ]; then
              yarn build
            else
              npm run build
            fi
          else
            echo "No build script found."
          fi

      - name: Run test script
        if: steps.find_package.outputs.found == 'true'
        working-directory: ${{ steps.find_package.outputs.package_dir }}
        run: |
          if grep -q '"test":' package.json; then
            echo "Running test script..."
            if [ -f "pnpm-lock.yaml" ]; then
              pnpm run test
            elif [ -f "yarn.lock" ]; then
              yarn test
            else
              npm run test
            fi
          else
            echo "No test script found."
          fi
